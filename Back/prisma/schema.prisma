// ========================
// CONFIGURATION PRISMA
// ========================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"           // SQLite in-memory database
  url      = env("DATABASE_URL")    // Uses environment variable for database URL
}

// ========================
// ENUMS
// ========================

// enum UsageType {
//   CONTINUOUS    
//   DISPOSABLE 
// }

// enum TransactionType {
//   RECURRING 
//   VARIABLE   
// }

// ========================
// MODELS
// ========================

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  password   String
  createdAt  DateTime  @default(now())

  // Relationships
  emails     Email[]
  phones     Phone[]
  addresses  Address[]  
  entries    Entry[]
  exits      Exit[]
  accounts   Account[]   
  revenues   Revenue[]
  purchases  Purchase[]
  inventories Inventory[]  
}

model Email {
  id        Int    @id @default(autoincrement())
  email     String @unique
  userId    Int

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Phone {
  id        Int     @id @default(autoincrement())
  number    String
  areaCode  Int
  userId    Int

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([number, userId])
}

model Address {
  id        Int     @id @default(autoincrement())
  street    String
  number    String
  city      String
  neighborhood String
  userId    Int

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([street, number, city, neighborhood, userId])
}

model Account {
  id        Int     @id @default(autoincrement())
  name      String
  bank      String
  balance   Int     @default(0)
  userId    Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries   Entry[]   
  exits     Exit[]   

  @@index([userId])
}

model Entry {
  id        Int     @id @default(autoincrement())
  name      String
  //type      TransactionType
  date      DateTime
  value     Int
  userId    Int
  accountId Int

  user      User    @relation(fields: [userId], references: [id])
  account   Account @relation(fields: [accountId], references: [id])

  @@unique([name, userId])
}

model Exit {
  id        Int     @id @default(autoincrement())
  name      String
  //type      TransactionType
  date      DateTime
  value     Int
  userId    Int
  accountId Int

  user      User    @relation(fields: [userId], references: [id])
  account   Account @relation(fields: [accountId], references: [id])

  @@unique([name, userId])
}

model Revenue {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  attemptDate  DateTime
  note         String?
  userId       Int

  user      User   @relation(fields: [userId], references: [id])
}

model Unit {
  id         Int     @id @default(autoincrement())
  name       String
  abbreviation String

  products   Product[]   
  inventories Inventory[]   
  purchases  Purchase[]   
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  products    Product[]   
}

model Batch {
  id          Int     @id @default(autoincrement())
  name        String
  expiration  DateTime
  quantity    Int

  products    Product[]   
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Int
  createdAt   DateTime
  //usage      UsageType
  photoUrl    String?
  purchaseDate DateTime?

  categoryId  Int
  batchId     Int
  unitId      Int

  category    Category @relation(fields: [categoryId], references: [id])
  batch       Batch    @relation(fields: [batchId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])

  inventories Inventory[]   
  purchases   Purchase[]   
}

model Inventory {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  unitId    Int
  quantity  Int

  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  unit      Unit    @relation(fields: [unitId], references: [id])

  @@index([userId])
}

model List {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  totalValue  Int
  isFinalized Boolean
  createdAt   DateTime @default(now())

  purchases   Purchase[]   
}

model Purchase {
  id          Int     @id @default(autoincrement())
  listId      Int
  productId   Int
  userId      Int
  unitId      Int
  quantity    Int
  purchaseDate DateTime @default(now())

  list        List     @relation(fields: [listId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])

  @@unique([listId, productId, userId])
}
